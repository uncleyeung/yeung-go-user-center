// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

//go:generate mockgen -destination ./userservice_mock.go -package userservice -source $GOFILE

package userservice

import (
	"context"

	"github.com/uncleyeung/yeung-go-user-center/rpc/user/user"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	Account                 = user.Account
	Address                 = user.Address
	GetByIdReq              = user.GetByIdReq
	AccountUpdateReq        = user.AccountUpdateReq
	AccountResp             = user.AccountResp
	AddressListResp         = user.AddressListResp
	UserAddResp             = user.UserAddResp
	UserUpdateReq           = user.UserUpdateReq
	UserDeleteResp          = user.UserDeleteResp
	UserUpdateResp          = user.UserUpdateResp
	AddressUpdateReq        = user.AddressUpdateReq
	AddressResp             = user.AddressResp
	UserAddReq              = user.UserAddReq
	AddressListByUserIdResp = user.AddressListByUserIdResp
	UserGetByIdResp         = user.UserGetByIdResp
	AccountUpdateResp       = user.AccountUpdateResp

	UserService interface {
		UserAdd(ctx context.Context, in *UserAddReq) (*UserAddResp, error)
		UserSelectById(ctx context.Context, in *GetByIdReq) (*UserGetByIdResp, error)
		UserUpdate(ctx context.Context, in *UserUpdateReq) (*UserUpdateResp, error)
		UserDelete(ctx context.Context, in *GetByIdReq) (*UserDeleteResp, error)
		UserAccountSelectById(ctx context.Context, in *GetByIdReq) (*AccountResp, error)
		UserAccountSelectByUserId(ctx context.Context, in *GetByIdReq) (*AccountResp, error)
		UserAccountUpdate(ctx context.Context, in *AccountUpdateReq) (*AccountUpdateResp, error)
		UserAddressUpdate(ctx context.Context, in *AddressUpdateReq) (*AddressResp, error)
		UserAddressSelectByUserId(ctx context.Context, in *GetByIdReq) (*AddressListResp, error)
		UserAddressAdd(ctx context.Context, in *AddressUpdateReq) (*AddressResp, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

func (m *defaultUserService) UserAdd(ctx context.Context, in *UserAddReq) (*UserAddResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.UserAdd(ctx, in)
}

func (m *defaultUserService) UserSelectById(ctx context.Context, in *GetByIdReq) (*UserGetByIdResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.UserSelectById(ctx, in)
}

func (m *defaultUserService) UserUpdate(ctx context.Context, in *UserUpdateReq) (*UserUpdateResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.UserUpdate(ctx, in)
}

func (m *defaultUserService) UserDelete(ctx context.Context, in *GetByIdReq) (*UserDeleteResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.UserDelete(ctx, in)
}

func (m *defaultUserService) UserAccountSelectById(ctx context.Context, in *GetByIdReq) (*AccountResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.UserAccountSelectById(ctx, in)
}

func (m *defaultUserService) UserAccountSelectByUserId(ctx context.Context, in *GetByIdReq) (*AccountResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.UserAccountSelectByUserId(ctx, in)
}

func (m *defaultUserService) UserAccountUpdate(ctx context.Context, in *AccountUpdateReq) (*AccountUpdateResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.UserAccountUpdate(ctx, in)
}

func (m *defaultUserService) UserAddressUpdate(ctx context.Context, in *AddressUpdateReq) (*AddressResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.UserAddressUpdate(ctx, in)
}

func (m *defaultUserService) UserAddressSelectByUserId(ctx context.Context, in *GetByIdReq) (*AddressListResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.UserAddressSelectByUserId(ctx, in)
}

func (m *defaultUserService) UserAddressAdd(ctx context.Context, in *AddressUpdateReq) (*AddressResp, error) {
	client := user.NewUserServiceClient(m.cli.Conn())
	return client.UserAddressAdd(ctx, in)
}
